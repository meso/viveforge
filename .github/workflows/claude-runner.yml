name: Claude Code Runner
on:
  issue_comment:
    types: [created]
  issues:
    types: [opened]

jobs:
  claude-runner:
    # mesoユーザーのみ実行可能
    if: |
      github.event.issue.pull_request == null &&
      (github.event.issue.user.login == 'meso' || github.event.comment.user.login == 'meso') &&
      (
        (github.event_name == 'issue_comment' && contains(github.event.comment.body, '@claude')) ||
        (github.event_name == 'issues' && contains(github.event.issue.body, '@claude'))
      )
    runs-on: self-hosted
    permissions:
      issues: write
      contents: write
      pull-requests: write
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Extract command and context
        id: extract
        uses: actions/github-script@v7
        with:
          script: |
            // @claude の後のコマンドを抽出
            let body, command;
            if (context.eventName === 'issue_comment') {
              body = context.payload.comment.body;
            } else {
              body = context.payload.issue.body;
            }
            
            const match = body.match(/@claude\s+(.+)/);
            command = match ? match[1].trim() : '';
            
            // issueの全コメントを取得
            const comments = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.payload.issue.number
            });
            
            // コンテキストを構築
            const issueContext = {
              title: context.payload.issue.title,
              body: context.payload.issue.body,
              number: context.payload.issue.number,
              url: context.payload.issue.html_url,
              comments: comments.data.map(comment => ({
                author: comment.user.login,
                body: comment.body,
                created_at: comment.created_at
              }))
            };
            
            // 一時ファイルにコンテキストを保存
            const fs = require('fs');
            const contextFile = '/tmp/issue-context.json';
            fs.writeFileSync(contextFile, JSON.stringify(issueContext, null, 2));
            
            // コマンドも一時ファイルに保存（引用符問題を回避）
            const commandFile = '/tmp/claude-command.txt';
            fs.writeFileSync(commandFile, command);
            
            // 出力設定
            core.setOutput('command_file', commandFile);
            core.setOutput('context_file', contextFile);
            core.setOutput('issue_title', context.payload.issue.title);
            core.setOutput('issue_number', context.payload.issue.number);
      
      - name: Post acknowledgment
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: '🤖 Claude Code実行中...'
            })
      
      - name: Run Claude Code
        id: claude
        env:
          COMMAND_FILE: ${{ steps.extract.outputs.command_file }}
          CONTEXT_FILE: ${{ steps.extract.outputs.context_file }}
          ISSUE_TITLE: ${{ steps.extract.outputs.issue_title }}
          ISSUE_NUMBER: ${{ steps.extract.outputs.issue_number }}
        run: |
          # ファイルからコマンドを読み取り
          CLAUDE_COMMAND=$(cat "$COMMAND_FILE")
          
          echo "Issue #$ISSUE_NUMBER: $ISSUE_TITLE"
          echo "Executing: $CLAUDE_COMMAND"
          
          # 一時ファイルに結果を保存
          OUTPUT_FILE=$(mktemp)
          
          # コンテキスト付きでClaude Codeを実行
          cat > /tmp/claude-prompt.txt << 'EOF'
GitHub Issue Context:
EOF
          echo "Title: $ISSUE_TITLE" >> /tmp/claude-prompt.txt
          echo "Issue Number: #$ISSUE_NUMBER" >> /tmp/claude-prompt.txt
          cat >> /tmp/claude-prompt.txt << 'EOF'

Full Context (JSON):
EOF
          cat "$CONTEXT_FILE" >> /tmp/claude-prompt.txt
          cat >> /tmp/claude-prompt.txt << 'EOF'

EOF
          echo "User Request: $CLAUDE_COMMAND" >> /tmp/claude-prompt.txt
          cat >> /tmp/claude-prompt.txt << 'EOF'

Please execute the user's request with full understanding of the issue context above.
EOF
          
          # Claude Codeを実行（プロンプトファイルを使用）
          /usr/local/bin/claude --file /tmp/claude-prompt.txt > "$OUTPUT_FILE" 2>&1 || true
          
          # 結果を読み込み（GitHubの制限を考慮して最初の1000行のみ）
          RESULT=$(head -n 1000 "$OUTPUT_FILE")
          
          # 結果が長すぎる場合は警告を追加
          if [ $(wc -l < "$OUTPUT_FILE") -gt 1000 ]; then
            RESULT="${RESULT}
...
(出力が長すぎるため、最初の1000行のみ表示)"
          fi
          
          # クリーンアップ
          rm -f "$OUTPUT_FILE"
          
          # GitHub Outputに設定（改行を適切にエスケープ）
          echo "result<<EOF" >> $GITHUB_OUTPUT
          echo "$RESULT" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
      
      - name: Post result
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: '✅ 実行結果:\n```\n${{ steps.claude.outputs.result }}\n```'
            })